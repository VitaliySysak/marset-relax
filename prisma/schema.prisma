generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Massage {
  id          Int      @id @default(autoincrement())
  name        String
  durationMin Int
  price       Int
  description String
  bonuses     String[]
}

model Client {
  id           Int               @id @default(autoincrement())
  fullName     String
  email        String            @unique
  phone        String
  appointments AppointmentSlot[]
}

model AppointmentSlot {
  id          String   @id @default(uuid())
  time        DateTime
  reserved    Boolean  @default(false)
  massageType String?

  clientId Int?
  Client   Client? @relation(fields: [clientId], references: [id])
}

// model Category {
//   id       Int       @id @default(autoincrement())
//   name     String    @unique
//   products Product[]
// }

// model Product {
//   id          Int           @id @default(autoincrement())
//   name        String
//   imageUrl    String
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt
//   categoryId  Int
//   category    Category      @relation(fields: [categoryId], references: [id])
//   items       ProductItem[]
//   ingredients Ingredient[]  @relation("IngredientToProduct")
// }

// model ProductItem {
//   id        Int        @id @default(autoincrement())
//   price     Int
//   size      Int?
//   pizzaType Int?
//   productId Int
//   cartItems CartItem[]
//   product   Product    @relation(fields: [productId], references: [id])
// }

// model Ingredient {
//   id        Int        @id @default(autoincrement())
//   name      String
//   price     Int
//   imageUrl  String
//   createdAt DateTime   @default(now())
//   updatedAt DateTime   @updatedAt
//   cartItems CartItem[] @relation("CartItemToIngredient")
//   products  Product[]  @relation("IngredientToProduct")
// }

// model Cart {
//   id          Int        @id @default(autoincrement())
//   totalAmount Int        @default(0)
//   token       String
//   createdAt   DateTime   @default(now())
//   updatedAt   DateTime   @updatedAt
//   userId      Int?       @unique
//   user        User?      @relation(fields: [userId], references: [id])
//   items       CartItem[]
// }

// model CartItem {
//   id            Int          @id @default(autoincrement())
//   quantity      Int          @default(1)
//   createdAt     DateTime     @default(now())
//   updatedAt     DateTime     @updatedAt
//   productItemId Int
//   cartId        Int
//   cart          Cart         @relation(fields: [cartId], references: [id])
//   productItem   ProductItem  @relation(fields: [productItemId], references: [id])
//   ingredients   Ingredient[] @relation("CartItemToIngredient")
// }

// model Order {
//   id          Int         @id @default(autoincrement())
//   token       String
//   totalAmount Int
//   status      OrderStatus
//   items       Json
//   fullName    String
//   address     String
//   email       String
//   phone       String
//   comment     String?
//   userId      Int?
//   paymentId   Int?
//   user        User?       @relation(fields: [userId], references: [id])
// }

// model VerificationCode {
//   id        Int      @id @default(autoincrement())
//   code      String
//   createdAt DateTime @default(now())
//   userId    Int      @unique
//   user      User     @relation(fields: [userId], references: [id])

//   @@unique([userId, code])
// }

// enum OrderStatus {
//   PENDING
//   SUCCEEDED
//   CANCELLED
// }

// enum UserRole {
//   USER
//   ADMIN
// }
